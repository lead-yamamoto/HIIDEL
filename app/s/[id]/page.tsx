"use client";

import { useState, useEffect, use } from "react";
import { motion } from "framer-motion";
import { Star, Send, CheckCircle, AlertCircle, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface Question {
  id: number;
  type: "rating" | "text" | "choice";
  question: string;
  required: boolean;
  options?: string[];
  scale?: number;
}

interface Survey {
  id: string;
  title: string;
  description: string;
  questions: Question[];
  isActive: boolean;
  storeId?: string;
  googleReviewUrl?: string;
}

export default function SurveyResponsePage({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const resolvedParams = use(params);
  const surveyId = resolvedParams.id;

  const [survey, setSurvey] = useState<Survey | null>(null);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<
    Record<number, string>
  >({});
  const [showImprovementForm, setShowImprovementForm] = useState(false);
  const [improvementText, setImprovementText] = useState("");
  const [googleReviewUrl, setGoogleReviewUrl] = useState<string | null>(null);
  const [storeName, setStoreName] = useState<string | null>(null);
  const [isRedirecting, setIsRedirecting] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    fetchSurvey();

    // „É¢„Éê„Ç§„É´„Éá„Éê„Ç§„ÇπÂà§ÂÆö
    const checkMobile = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const mobileKeywords = [
        "mobile",
        "android",
        "iphone",
        "ipad",
        "ipod",
        "blackberry",
        "windows phone",
      ];
      return (
        mobileKeywords.some((keyword) => userAgent.includes(keyword)) ||
        window.innerWidth <= 768
      );
    };

    setIsMobile(checkMobile());
    console.log(`üì± Device type: ${checkMobile() ? "Mobile" : "Desktop"}`);
  }, [surveyId]);

  const fetchSurvey = async () => {
    try {
      console.log(`üìã Fetching survey: ${surveyId}`);
      const response = await fetch(`/api/surveys/${surveyId}`);
      console.log(`üìã Survey API response status: ${response.status}`);

      if (response.ok) {
        const data = await response.json();
        console.log(`üìä Survey data:`, data);
        setSurvey(data.survey);

        // Â∫óËàó„ÅÆGoogle„É¨„Éì„É•„ÉºURL„ÇíÂèñÂæó
        if (data.survey.storeId) {
          console.log(`üè™ Fetching store data for: ${data.survey.storeId}`);
          const storeUrl = `/api/stores?id=${data.survey.storeId}`;
          console.log(`üè™ Store API URL: ${storeUrl}`);

          const storeResponse = await fetch(storeUrl);
          console.log(`üè™ Store API response status: ${storeResponse.status}`);
          console.log(
            `üè™ Store API response headers:`,
            Object.fromEntries(storeResponse.headers.entries())
          );

          if (storeResponse.ok) {
            const storeData = await storeResponse.json();
            console.log(`üè™ Store API response:`, storeData);

            // Âçò‰∏Ä„ÅÆÂ∫óËàó„ÅÆÂ†¥Âêà„ÅØ store „Éó„É≠„Éë„ÉÜ„Ç£„ÄÅË§áÊï∞„ÅÆÂ†¥Âêà„ÅØ stores ÈÖçÂàó
            const store = storeData.store || storeData.stores?.[0];
            console.log(`üè™ Selected store:`, store);

            if (store?.googleReviewUrl) {
              console.log(
                `üîó Setting Google Review URL: ${store.googleReviewUrl}`
              );
              setGoogleReviewUrl(store.googleReviewUrl);
            } else {
              console.log(`‚ö†Ô∏è No Google Review URL found for store`);
              console.log(`üîç Debug: Store object details:`, {
                storeKeys: Object.keys(store || {}),
                googleReviewUrl: store?.googleReviewUrl,
                hasGoogleReviewUrl: "googleReviewUrl" in (store || {}),
                storeObject: store,
              });
            }

            if (store?.displayName) {
              console.log(`üè∑Ô∏è Setting store name: ${store.displayName}`);
              setStoreName(store.displayName);
            } else if (store?.name) {
              console.log(`üè∑Ô∏è Setting store name (fallback): ${store.name}`);
              setStoreName(store.name);
            }
          } else {
            console.error(`‚ùå Store API failed: ${storeResponse.status}`);
            const storeErrorData = await storeResponse.text();
            console.error(`‚ùå Store API error details:`, storeErrorData);
          }
        } else {
          console.log(`‚ö†Ô∏è No store ID found in survey`);
        }
      } else {
        console.error(`‚ùå Survey API failed: ${response.status}`);
        const errorData = await response.text();
        console.error(`‚ùå Survey API error details:`, errorData);
        setError("„Ç¢„É≥„Ç±„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
      }
    } catch (error) {
      console.error("„Ç¢„É≥„Ç±„Éº„ÉàÂèñÂæó„Ç®„É©„Éº:", error);
      console.error("Error details:", {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        surveyId: surveyId,
      });
      setError("„Ç¢„É≥„Ç±„Éº„Éà„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
    } finally {
      setIsLoading(false);
    }
  };

  const handleAnswerChange = (questionId: number, value: string) => {
    setAnswers((prev) => ({
      ...prev,
      [questionId]: value,
    }));

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
    if (validationErrors[questionId]) {
      setValidationErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[questionId];
        return newErrors;
      });
    }
  };

  const validateAnswers = () => {
    const errors: Record<number, string> = {};

    if (!survey) return errors;

    for (const question of survey.questions) {
      if (question.required) {
        const answer = answers[question.id];
        if (!answer || answer.trim() === "") {
          errors[question.id] = "„Åì„ÅÆÈ†ÖÁõÆ„ÅØÂøÖÈ†à„Åß„Åô";
        }
      }
    }

    return errors;
  };

  const calculateAverageRating = () => {
    if (!survey) return 0;

    const ratingQuestions = survey.questions.filter((q) => q.type === "rating");
    if (ratingQuestions.length === 0) return 0;

    let totalRating = 0;
    let ratingCount = 0;

    ratingQuestions.forEach((question) => {
      const rating = answers[question.id];
      if (rating) {
        totalRating += parseInt(rating);
        ratingCount++;
      }
    });

    return ratingCount > 0 ? totalRating / ratingCount : 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!survey) return;

    const errors = validateAnswers();
    if (Object.keys(errors).length > 0) {
      setValidationErrors(errors);
      return;
    }

    // ÊîπÂñÑÁÇπ„Éï„Ç©„Éº„É†„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆÂá¶ÁêÜ
    if (showImprovementForm) {
      setIsSubmitting(true);
      setError(null);

      try {
        const response = await fetch(`/api/surveys/${surveyId}/responses`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            answers: {
              ...answers,
              improvement: improvementText,
            },
            respondentInfo: {
              submittedAt: new Date().toISOString(),
              averageRating: calculateAverageRating(),
            },
          }),
        });

        if (response.ok) {
          setIsSubmitted(true);
        } else {
          const data = await response.json();
          setError(data.error || "ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
        }
      } catch (error) {
        console.error("ÂõûÁ≠îÈÄÅ‰ø°„Ç®„É©„Éº:", error);
        setError("ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
      } finally {
        setIsSubmitting(false);
      }
      return;
    }

    // Âπ≥ÂùáË©ï‰æ°„ÇíË®àÁÆó
    const averageRating = calculateAverageRating();
    console.log(`‚≠ê Âπ≥ÂùáË©ï‰æ°: ${averageRating}`);
    console.log(`üîó Google„É¨„Éì„É•„ÉºURL: ${googleReviewUrl || "Êú™Ë®≠ÂÆö"}`);
    console.log(`üìù ÊòüË©ï‰æ°„ÅÆË©≥Á¥∞:`, answers);

    // ÊòüË©ï‰æ°„ÅÆÂõûÁ≠î„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
    const ratingQuestions = survey.questions.filter((q) => q.type === "rating");
    ratingQuestions.forEach((question) => {
      const rating = answers[question.id];
      console.log(
        `   Ë≥™Âïè ${question.id}: "${question.question}" ‚Üí ÂõûÁ≠î: ${rating}`
      );
    });

    // Âπ≥ÂùáË©ï‰æ°„Åå4.0‰ª•‰∏ä„ÅÆÂ†¥Âêà
    if (averageRating >= 4.0) {
      console.log(
        `‚úÖ Âπ≥ÂùáË©ï‰æ°„Åå4.0‰ª•‰∏ä„ÅÆ„Åü„ÇÅ„ÄÅGoogle„É¨„Éì„É•„Éº„Éö„Éº„Ç∏„Å∏ÈÅ∑Áßª„Åó„Åæ„Åô`
      );
      console.log(`üîç Debug: Google„É¨„Éì„É•„ÉºURLÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ:`, {
        googleReviewUrl,
        hasUrl: !!googleReviewUrl,
        urlType: typeof googleReviewUrl,
        urlLength: googleReviewUrl?.length || 0,
      });

      if (googleReviewUrl) {
        setIsSubmitting(true);
        setError(null);

        try {
          // „Åæ„Åö„Ç¢„É≥„Ç±„Éº„ÉàÂõûÁ≠î„Çí‰øùÂ≠ò
          const response = await fetch(`/api/surveys/${surveyId}/responses`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              answers,
              respondentInfo: {
                submittedAt: new Date().toISOString(),
                averageRating: averageRating,
              },
            }),
          });

          if (response.ok) {
            // Ê≠£„Åó„ÅÑPlace ID„Éô„Éº„Çπ„ÅÆGoogle„É¨„Éì„É•„ÉºURL„ÇíÂèñÂæó
            console.log(
              `üåê Redirecting to Google Review URL: ${googleReviewUrl}`
            );
            console.log(`üìç Store: ${storeName || "Â∫óËàóÂêçÊú™Ë®≠ÂÆö"}`);

            // Place ID„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if (
              googleReviewUrl.includes(
                "search.google.com/local/writereview?placeid="
              ) &&
              !googleReviewUrl.includes("locations/")
            ) {
              console.log(`‚úÖ Using verified Google Review URL with Place ID`);
            } else {
              console.log(`‚ö†Ô∏è Using fallback Google Review URL`);
            }

            // „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÁä∂ÊÖã„ÇíË®≠ÂÆö
            console.log(
              `üåü Setting redirect state for URL: ${googleReviewUrl}`
            );
            setIsRedirecting(true);

            // „Éá„Éê„Ç§„ÇπÂà•„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂá¶ÁêÜ
            const executeRedirect = () => {
              console.log(`üöÄ Executing redirect to: ${googleReviewUrl}`);
              console.log(`üì± Device: ${isMobile ? "Mobile" : "Desktop"}`);

              if (isMobile) {
                // „É¢„Éê„Ç§„É´: Áõ¥Êé•„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºàÂêå„Åò„Çø„ÉñÔºâ
                console.log(`üì± Mobile redirect: Direct navigation`);
                try {
                  window.location.href = googleReviewUrl;
                } catch (error) {
                  console.error("üö® Mobile redirect failed:", error);
                  // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Êñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åè
                  try {
                    window.open(googleReviewUrl, "_blank");
                  } catch (fallbackError) {
                    console.error("üö® Mobile fallback failed:", fallbackError);
                    // ÂÖ®„Å¶Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
                    setIsSubmitted(true);
                    setIsSubmitting(false);
                    setIsRedirecting(false);
                  }
                }
              } else {
                // „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó: Êñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åè
                console.log(`üíª Desktop redirect: New tab`);
                try {
                  // „É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„Å´„Çà„Çã„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Å®„Åó„Å¶ÂÆüË°å
                  const link = document.createElement("a");
                  link.href = googleReviewUrl;
                  link.target = "_blank";
                  link.rel = "noopener noreferrer";

                  console.log(`üîó Debug: „É™„É≥„ÇØË¶ÅÁ¥†‰ΩúÊàêÂÆå‰∫Ü`, {
                    href: link.href,
                    target: link.target,
                  });

                  // „É™„É≥„ÇØ„Çí‰∏ÄÊôÇÁöÑ„Å´DOM„Å´ËøΩÂä†„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØ
                  document.body.appendChild(link);
                  console.log(`üìù Debug: „É™„É≥„ÇØ„ÇíDOM„Å´ËøΩÂä†`);

                  link.click();
                  console.log(`üëÜ Debug: „É™„É≥„ÇØ„ÇØ„É™„ÉÉ„ÇØÂÆüË°å`);

                  document.body.removeChild(link);
                  console.log(`üóëÔ∏è Debug: „É™„É≥„ÇØ„ÇíDOM„Åã„ÇâÂâäÈô§`);

                  console.log(`‚úÖ Redirect link clicked successfully`);

                  // Êñ∞„Åó„ÅÑ„Çø„Éñ„Åß„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Åó„ÅüÂæå„ÄÅÂÖÉ„ÅÆ„Çø„Éñ„ÅØÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
                  setTimeout(() => {
                    console.log(`üéâ Showing completion screen in current tab`);
                    setIsSubmitted(true);
                    setIsSubmitting(false);
                    setIsRedirecting(false);
                  }, 1000);
                } catch (error) {
                  console.error("üö® Desktop redirect execution failed:", error);
                  // „Ç®„É©„ÉºÊôÇ„ÅØÊñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åè„Åì„Å®„ÇíË©¶Ë°å
                  try {
                    window.open(googleReviewUrl, "_blank");
                    console.log(`‚úÖ Fallback: Opened in new tab`);
                    // ÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÇÇÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
                    setTimeout(() => {
                      setIsSubmitted(true);
                      setIsSubmitting(false);
                      setIsRedirecting(false);
                    }, 1000);
                  } catch (fallbackError) {
                    console.error(
                      "üö® Desktop fallback redirect also failed:",
                      fallbackError
                    );
                    // ÂÖ®„Å¶„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÇÇÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
                    setIsSubmitted(true);
                    setIsSubmitting(false);
                    setIsRedirecting(false);
                  }
                }
              }
            };

            // Âç≥Â∫ß„Å´ÂÆüË°åÔºà„É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂÜÖ„ÅßÔºâ
            console.log(`üéØ Debug: „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÈñ¢Êï∞ÂÆüË°åÈñãÂßã`);
            executeRedirect();

            // „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂá¶ÁêÜ„ÅØÈùûÂêåÊúü„ÅßÂÆüË°å„Åï„Çå„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØisSubmitting„Çífalse„Å´„Åó„Å™„ÅÑ
            return;
          } else {
            const data = await response.json();
            setError(data.error || "ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
            setIsSubmitting(false);
          }
        } catch (error) {
          console.error("ÂõûÁ≠îÈÄÅ‰ø°„Ç®„É©„Éº:", error);
          setError("ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
          setIsSubmitting(false);
        }
      } else {
        console.log(`‚ö†Ô∏è Google„É¨„Éì„É•„ÉºURL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
        console.log(`üîç Debug: Google„É¨„Éì„É•„ÉºURLË©≥Á¥∞:`, {
          googleReviewUrl,
          type: typeof googleReviewUrl,
          length: googleReviewUrl?.length,
          truthyCheck: !!googleReviewUrl,
        });
        // Google„É¨„Éì„É•„ÉºURL„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Åæ„ÅöÂõûÁ≠î„Çí‰øùÂ≠ò„Åó„Å¶„Åã„ÇâÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
        setIsSubmitting(true);
        setError(null);

        try {
          const response = await fetch(`/api/surveys/${surveyId}/responses`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              answers,
              respondentInfo: {
                submittedAt: new Date().toISOString(),
                averageRating: averageRating,
              },
            }),
          });

          if (response.ok) {
            setIsSubmitted(true);
          } else {
            const data = await response.json();
            setError(data.error || "ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
          }
        } catch (error) {
          console.error("ÂõûÁ≠îÈÄÅ‰ø°„Ç®„É©„Éº:", error);
          setError("ÂõûÁ≠î„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
        } finally {
          setIsSubmitting(false);
        }
      }
    } else {
      // Âπ≥ÂùáË©ï‰æ°„Åå3.9‰ª•‰∏ã„ÅÆÂ†¥Âêà„ÄÅÊîπÂñÑÁÇπÂÖ•Âäõ„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
      console.log(`üîΩ Âπ≥ÂùáË©ï‰æ°„Åå4.0Êú™Ê∫Ä„ÅÆ„Åü„ÇÅ„ÄÅÊîπÂñÑÁÇπ„Éï„Ç©„Éº„É†„ÇíË°®Á§∫„Åó„Åæ„Åô`);
      setShowImprovementForm(true);
    }
  };

  const renderQuestion = (question: Question) => {
    const hasError = validationErrors[question.id];

    switch (question.type) {
      case "rating":
        return (
          <div className="space-y-3">
            <div className="flex justify-center space-x-2">
              {Array.from({ length: question.scale || 5 }, (_, i) => i + 1).map(
                (rating) => (
                  <button
                    key={rating}
                    type="button"
                    onClick={() =>
                      handleAnswerChange(question.id, rating.toString())
                    }
                    className={`p-2 transition-colors ${
                      answers[question.id] === rating.toString()
                        ? "text-yellow-500"
                        : "text-gray-300 hover:text-yellow-400"
                    }`}
                  >
                    <Star
                      size={32}
                      fill={
                        answers[question.id] === rating.toString()
                          ? "currentColor"
                          : "none"
                      }
                    />
                  </button>
                )
              )}
            </div>
            <div className="flex justify-between text-sm text-muted-foreground px-2">
              <span>„Å®„Å¶„ÇÇ‰∏çÊ∫Ä</span>
              <span>„Å®„Å¶„ÇÇÊ∫ÄË∂≥</span>
            </div>
          </div>
        );

      case "choice":
        return (
          <RadioGroup
            value={answers[question.id] || ""}
            onValueChange={(value) => handleAnswerChange(question.id, value)}
          >
            {question.options?.map((option, index) => (
              <div key={index} className="flex items-center space-x-2">
                <RadioGroupItem value={option} id={`${question.id}-${index}`} />
                <Label htmlFor={`${question.id}-${index}`}>{option}</Label>
              </div>
            ))}
          </RadioGroup>
        );

      case "text":
        return (
          <Textarea
            value={answers[question.id] || ""}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            placeholder="„ÅîÊÑèË¶ã„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ..."
            className={hasError ? "border-red-500" : ""}
          />
        );

      default:
        return null;
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-muted-foreground">„Ç¢„É≥„Ç±„Éº„Éà„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
            <CardTitle>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  if (isRedirecting) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Card className="w-full max-w-md text-center">
            <CardHeader>
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
              <CardTitle className="text-2xl">
                Google„É¨„Éì„É•„Éº„Éö„Éº„Ç∏„Å∏ÁßªÂãï‰∏≠...
              </CardTitle>
              <CardDescription>
                „Ç¢„É≥„Ç±„Éº„Éà„ÅÆÂõûÁ≠î„Çí„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüÔºÅ
                <br />
                Google„É¨„Éì„É•„Éº„Éö„Éº„Ç∏„Å´ÁßªÂãï„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
                <br />
                <br />
                <span className="text-sm text-muted-foreground">
                  {isMobile
                    ? "„É¢„Éê„Ç§„É´„Åß„ÅØÂêå„Åò„Çø„Éñ„ÅßÁßªÂãï„Åó„Åæ„Åô„ÄÇËá™ÂãïÁöÑ„Å´ÁßªÂãï„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ‰∏ã„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                    : "Êñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åç„Åæ„Åô„ÄÇËá™ÂãïÁöÑ„Å´ÁßªÂãï„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ‰∏ã„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"}
                </span>
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Button
                onClick={() => {
                  if (googleReviewUrl) {
                    console.log(`üîó Manual redirect to: ${googleReviewUrl}`);
                    console.log(
                      `üì± Manual redirect device: ${
                        isMobile ? "Mobile" : "Desktop"
                      }`
                    );

                    if (isMobile) {
                      // „É¢„Éê„Ç§„É´: Âêå„Åò„Çø„Éñ„Åß„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
                      window.location.href = googleReviewUrl;
                    } else {
                      // „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó: Êñ∞„Åó„ÅÑ„Çø„Éñ„ÅßÈñã„Åè
                      window.open(googleReviewUrl, "_blank");
                      // ÊâãÂãï„Åß„É™„É≥„ÇØ„ÇíÈñã„ÅÑ„ÅüÂæå„ÄÅÂÆå‰∫ÜÁîªÈù¢„ÇíË°®Á§∫
                      setTimeout(() => {
                        console.log(
                          `üéâ Manual redirect completed, showing completion screen`
                        );
                        setIsSubmitted(true);
                        setIsSubmitting(false);
                        setIsRedirecting(false);
                      }, 500);
                    }
                  }
                }}
                className="w-full"
                variant="outline"
              >
                Google„É¨„Éì„É•„Éº„Éö„Éº„Ç∏„ÇíÈñã„Åè
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    );
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Card className="w-full max-w-md text-center">
            <CardHeader>
              <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
              <CardTitle className="text-2xl">„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ</CardTitle>
              <CardDescription>
                „Ç¢„É≥„Ç±„Éº„Éà„ÅÆÂõûÁ≠î„ÇíÈÄÅ‰ø°„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇ
                <br />
                „ÅäÂøô„Åó„ÅÑ‰∏≠„ÄÅË≤¥Èáç„Å™„ÅîÊÑèË¶ã„Çí„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„ÄÇ
              </CardDescription>
            </CardHeader>
          </Card>
        </motion.div>
      </div>
    );
  }

  if (!survey || !survey.isActive) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <AlertCircle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
            <CardTitle>„Ç¢„É≥„Ç±„Éº„Éà„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì</CardTitle>
            <CardDescription>
              „Åì„ÅÆ„Ç¢„É≥„Ç±„Éº„Éà„ÅØÁèæÂú®Âà©Áî®„Åß„Åç„Å™„ÅÑÁä∂ÊÖã„Åß„Åô„ÄÇ
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 py-8 px-4">
      <div className="max-w-2xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Card>
            <CardHeader className="text-center">
              <CardTitle className="text-2xl">{survey.title}</CardTitle>
              <CardDescription className="text-base">
                {survey.description}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-8">
              {showImprovementForm ? (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className="space-y-4"
                >
                  <div className="space-y-2">
                    <Label className="text-base font-medium">
                      „Çµ„Éº„Éì„ÇπÊîπÂñÑÁÇπ„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      Ë≤¥Èáç„Å™„ÅîÊÑèË¶ã„Çí„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™ÁÇπ„ÇíÊîπÂñÑ„Åô„Çå„Å∞„ÄÅ„Çà„ÇäËâØ„ÅÑ„Çµ„Éº„Éì„Çπ„ÇíÊèê‰æõ„Åß„Åç„Çã„Åß„Åó„Çá„ÅÜ„ÅãÔºü
                    </p>
                    <Textarea
                      value={improvementText}
                      onChange={(e) => setImprovementText(e.target.value)}
                      placeholder="ÊîπÂñÑÁÇπ„ÇÑ„ÅîË¶ÅÊúõ„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ..."
                      rows={6}
                      className="resize-none"
                    />
                  </div>
                </motion.div>
              ) : (
                survey.questions.map((question, index) => (
                  <motion.div
                    key={question.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className="space-y-4"
                  >
                    <div className="space-y-2">
                      <Label className="text-base font-medium">
                        {index + 1}. {question.question}
                        {question.required && (
                          <span className="text-red-500 ml-1">*</span>
                        )}
                      </Label>
                      {validationErrors[question.id] && (
                        <p className="text-red-500 text-sm">
                          {validationErrors[question.id]}
                        </p>
                      )}
                    </div>
                    {renderQuestion(question)}
                  </motion.div>
                ))
              )}

              <div className="pt-6">
                <Button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white text-lg py-6"
                >
                  {isSubmitting ? (
                    <div className="flex items-center">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      ÈÄÅ‰ø°‰∏≠...
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <Send size={20} className="mr-2" />
                      {showImprovementForm ? "„ÅîÊÑèË¶ã„ÇíÈÄÅ‰ø°" : "ÂõûÁ≠î„ÇíÈÄÅ‰ø°"}
                    </div>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}
