"use client";

import { useState, useEffect, useMemo } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import {
  ChevronDown,
  MessageSquare,
  ChevronRight,
  Globe,
  ArrowRight,
  AlertCircle,
  Store,
  Calendar,
  TrendingUp,
  Search,
  Send,
  Bot,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Sidebar } from "@/components/sidebar";
import { MobileHeader } from "@/components/mobile-header";
import { Badge } from "@/components/ui/badge";
import { LoadingState } from "@/components/ui/loading";
import { cn } from "@/lib/utils";
import { Star } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import {
  SkeletonCard,
  SkeletonText,
  SkeletonWithShine,
} from "@/components/ui/skeleton";

interface Review {
  id: string;
  storeId: string;
  storeName: string;
  googleLocationId?: string;
  rating: number;
  comment: string;
  reviewer: {
    displayName: string;
    profilePhotoUrl?: string | null;
  };
  createdAt: string;
  updateTime?: string;
  replied: boolean;
  replyText?: string | null;
  replyTime?: string | null;
  isRealData?: boolean;
  isSystemMessage?: boolean;
  messageType?: string;
}

interface GroupedReviews {
  [storeName: string]: Review[];
}

export default function ReviewsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [reviews, setReviews] = useState<Review[]>([]);
  const [isGoogleConnected, setIsGoogleConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedStore, setSelectedStore] = useState<string>("all");
  const [totalCount, setTotalCount] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const [sortBy, setSortBy] = useState("date");
  const [filterRating, setFilterRating] = useState("all");

  // Ëøî‰ø°Ê©üËÉΩÁî®„ÅÆÁä∂ÊÖãÂ§âÊï∞
  const [selectedReview, setSelectedReview] = useState<Review | null>(null);
  const [replyText, setReplyText] = useState("");
  const [isReplying, setIsReplying] = useState(false);
  const [isReplyDialogOpen, setIsReplyDialogOpen] = useState(false);
  const [isGeneratingAiReply, setIsGeneratingAiReply] = useState(false);

  // Prevent hydration mismatch
  useEffect(() => {
    setMounted(true);

    // URL„Åã„ÇâÂ∫óËàóID„ÇíÂèñÂæó
    const urlParams = new URLSearchParams(window.location.search);
    const storeId = urlParams.get("store");
    if (storeId) {
      setSelectedStore(storeId);
    }
  }, []);

  // Ë™çË®ºÁä∂ÊÖãÁ¢∫Ë™ç
  useEffect(() => {
    if (status === "loading") return;

    if (status === "unauthenticated") {
      router.push("/auth/signin");
      return;
    }

    checkGoogleConnection();
  }, [status, router]);

  const checkGoogleConnection = async () => {
    try {
      const response = await fetch("/api/google/auth-status");
      const data = await response.json();
      setIsGoogleConnected(data.isAuthenticated);

      if (data.isAuthenticated) {
        fetchReviews();
      } else {
        setIsLoading(false);
      }
    } catch (error) {
      console.error("GoogleË™çË®ºÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç„Å´Â§±Êïó:", error);
      setIsLoading(false);
    }
  };

  // selectedStore„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇ„Å´„É¨„Éì„É•„Éº„ÇíÂÜçÂèñÂæó
  useEffect(() => {
    if (isGoogleConnected) {
      fetchReviews();
    }
  }, [selectedStore, isGoogleConnected]);

  const fetchReviews = async () => {
    setIsLoading(true);
    setError(null);
    try {
      console.log("üîç Fetching reviews...");
      const url =
        selectedStore === "all"
          ? "/api/reviews"
          : `/api/reviews?storeId=${selectedStore}`;
      console.log("üì° Request URL:", url);

      const response = await fetch(url);
      console.log("üì° Response status:", response.status);
      console.log(
        "üì° Response headers:",
        Object.fromEntries(response.headers.entries())
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error("üì° Error response:", errorText);
        throw new Error(`Failed to fetch reviews: ${response.status}`);
      }

      const data = await response.json();
      console.log("üì° Response data:", data);
      console.log("üì° Reviews array:", data.reviews);
      console.log("üì° Reviews count:", data.count);
      console.log("üì° Stores checked:", data.storesChecked);
      console.log("üì° Is real data:", data.isRealData);
      if (data.reviews && data.reviews.length > 0) {
        console.log("üì° First review:", data.reviews[0]);
      } else {
        console.log("‚ùå No reviews found in response");
      }
      setReviews(data.reviews || []);
      setTotalCount(data.count || 0);
    } catch (error) {
      console.error("‚ùå Fetch reviews error:", error);
      setError(error instanceof Error ? error.message : "Unknown error");
    } finally {
      setIsLoading(false);
    }
  };

  // Â∫óËàó„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó
  const stores = useMemo(() => {
    const uniqueStores = Array.from(
      new Map(
        reviews.map((r) => [r.storeId, { id: r.storeId, name: r.storeName }])
      ).values()
    );
    return uniqueStores;
  }, [reviews]);

  // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„É¨„Éì„É•„Éº
  const filteredReviews = useMemo(() => {
    let filtered = reviews;

    // Â∫óËàó„Éï„Ç£„É´„Çø„Éº
    if (selectedStore !== "all") {
      filtered = filtered.filter((review) => review.storeId === selectedStore);
    }

    // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº
    if (searchTerm) {
      filtered = filtered.filter(
        (review) =>
          review.comment.toLowerCase().includes(searchTerm.toLowerCase()) ||
          review.storeName.toLowerCase().includes(searchTerm.toLowerCase()) ||
          review.reviewer.displayName
            .toLowerCase()
            .includes(searchTerm.toLowerCase())
      );
    }

    // Ë©ï‰æ°„Éï„Ç£„É´„Çø„Éº
    if (filterRating !== "all") {
      const rating = parseInt(filterRating);
      filtered = filtered.filter((review) => review.rating === rating);
    }

    // „ÇΩ„Éº„Éà
    filtered = [...filtered].sort((a, b) => {
      switch (sortBy) {
        case "date":
          return (
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          );
        case "rating-high":
          return b.rating - a.rating;
        case "rating-low":
          return a.rating - b.rating;
        case "store":
          return a.storeName.localeCompare(b.storeName);
        case "replied":
          return (a.replied ? 0 : 1) - (b.replied ? 0 : 1);
        default:
          return 0;
      }
    });

    return filtered;
  }, [reviews, searchTerm, sortBy, filterRating, selectedStore]);

  // Â∫óËàó„Åî„Å®„Å´„Ç∞„É´„Éº„ÉóÂåñ
  const groupedReviews = useMemo(() => {
    const grouped: GroupedReviews = {};
    filteredReviews.forEach((review) => {
      if (!grouped[review.storeName]) {
        grouped[review.storeName] = [];
      }
      grouped[review.storeName].push(review);
    });
    return grouped;
  }, [filteredReviews]);

  // Â∫óËàó„Åî„Å®„ÅÆÁµ±Ë®àÊÉÖÂ†±„ÇíË®àÁÆó
  const getStoreStats = (storeReviews: Review[]) => {
    const realReviews = storeReviews.filter((r) => !r.isSystemMessage);
    const totalReviews = realReviews.length;
    const avgRating =
      totalReviews > 0
        ? realReviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews
        : 0;
    const unrepliedCount = realReviews.filter((r) => !r.replied).length;

    return {
      totalReviews,
      avgRating,
      unrepliedCount,
      hasSystemMessages: storeReviews.some((r) => r.isSystemMessage),
    };
  };

  // Ëøî‰ø°„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñã„Åè
  const openReplyDialog = (review: Review) => {
    setSelectedReview(review);
    setReplyText(review.replyText || "");
    setIsReplyDialogOpen(true);
  };

  // Ëøî‰ø°„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñâ„Åò„Çã
  const closeReplyDialog = () => {
    setIsReplyDialogOpen(false);
    setSelectedReview(null);
    setReplyText("");
    setIsGeneratingAiReply(false);
  };

  // AIËøî‰ø°„ÇíÁîüÊàê
  const generateAiReply = async () => {
    if (!selectedReview) {
      console.error("‚ùå [UI] No selected review");
      return;
    }

    console.log("üîç [UI] Selected review data:", {
      id: selectedReview.id,
      storeId: selectedReview.storeId,
      storeName: selectedReview.storeName,
      comment: selectedReview.comment,
      rating: selectedReview.rating,
      hasComment: !!selectedReview.comment,
      hasStoreName: !!selectedReview.storeName,
      commentLength: selectedReview.comment?.length || 0,
      storeNameLength: selectedReview.storeName?.length || 0,
    });

    setIsGeneratingAiReply(true);

    // AIË®≠ÂÆö„ÇíÂèñÂæó
    let aiSettings = null;
    try {
      const settingsResponse = await fetch(
        `/api/ai-settings?storeId=${selectedReview.storeId}`
      );
      if (settingsResponse.ok) {
        const settingsData = await settingsResponse.json();
        if (settingsData.success) {
          aiSettings = settingsData.settings;
        }
      }
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [UI] Failed to load AI settings, using defaults:",
        error
      );
    }

    // „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà„ÇíÈÅ∏Êäû
    let customPrompt = null;
    let useCustomPrompt = false;

    if (aiSettings?.customPromptEnabled) {
      useCustomPrompt = true;
      const hasComment = !!selectedReview.comment?.trim();
      const rating = selectedReview.rating || 5;
      const isPositive = rating >= 4;
      const isNeutral = rating === 3;

      if (!hasComment) {
        customPrompt = aiSettings.noCommentReviewPrompt;
      } else if (isPositive) {
        customPrompt = aiSettings.positiveReviewPrompt;
      } else if (isNeutral) {
        customPrompt = aiSettings.neutralReviewPrompt;
      } else {
        customPrompt = aiSettings.negativeReviewPrompt;
      }
    }

    const requestData = {
      reviewText: selectedReview.comment || "",
      rating: selectedReview.rating || 5,
      businessName:
        selectedReview.storeName || selectedReview.storeId || "Â∫óËàó",
      businessType: "Â∫óËàó",
      customPrompt: customPrompt,
      useCustomPrompt: useCustomPrompt,
    };

    console.log("ü§ñ [UI] Generating AI reply for review:", {
      reviewId: selectedReview.id,
      rating: selectedReview.rating,
      comment: selectedReview.comment?.substring(0, 50) + "...",
      storeName: selectedReview.storeName,
    });

    console.log("üì§ [UI] Sending request data:", requestData);

    try {
      const response = await fetch("/api/ai/review-reply", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });

      if (response.ok) {
        const data = await response.json();
        console.log("‚úÖ [UI] AI reply generated successfully:", {
          success: data.success,
          replyLength: data.reply?.length,
          provider: data.metadata?.provider,
          model: data.metadata?.model,
        });
        setReplyText(data.reply);
      } else {
        const errorData = await response.json().catch(() => ({}));
        console.error("‚ùå [UI] AI reply generation failed:", {
          status: response.status,
          error: errorData.error,
          details: errorData.details,
        });

        // „Ç®„É©„ÉºÊôÇ„ÅØ„ÉÜ„Çπ„ÉàËøî‰ø°„ÇíÁîüÊàê
        const testReply = `${selectedReview.reviewer.displayName}Êßò„ÄÅ„Åì„ÅÆÂ∫¶„ÅØË≤¥Èáç„Å™„ÅîÊÑèË¶ã„Çí„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ„ÅäÂÆ¢Êßò„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÁúüÊëØ„Å´Âèó„ÅëÊ≠¢„ÇÅ„ÄÅ„Çà„ÇäËâØ„ÅÑ„Çµ„Éº„Éì„Çπ„ÅÆÊèê‰æõ„Å´Âä™„ÇÅ„Å¶„Åæ„ÅÑ„Çä„Åæ„Åô„ÄÇ„Åæ„Åü„ÅÆ„ÅîÂà©Áî®„Çí„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ`;
        setReplyText(testReply);

        // „É¶„Éº„Ç∂„Éº„Å´ÈÄöÁü•
        alert(
          `AIËøî‰ø°„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÉÜ„Çπ„ÉàËøî‰ø°„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ\n„Ç®„É©„Éº: ${
            errorData.error || "‰∏çÊòé„Å™„Ç®„É©„Éº"
          }`
        );
      }
    } catch (error) {
      console.error("üí• [UI] AI reply generation error:", error);
      // „Ç®„É©„ÉºÊôÇ„ÅØ„ÉÜ„Çπ„ÉàËøî‰ø°„ÇíÁîüÊàê
      const testReply = `${selectedReview.reviewer.displayName}Êßò„ÄÅ„Åì„ÅÆÂ∫¶„ÅØË≤¥Èáç„Å™„ÅîÊÑèË¶ã„Çí„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ„ÅäÂÆ¢Êßò„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÁúüÊëØ„Å´Âèó„ÅëÊ≠¢„ÇÅ„ÄÅ„Çà„ÇäËâØ„ÅÑ„Çµ„Éº„Éì„Çπ„ÅÆÊèê‰æõ„Å´Âä™„ÇÅ„Å¶„Åæ„ÅÑ„Çä„Åæ„Åô„ÄÇ„Åæ„Åü„ÅÆ„ÅîÂà©Áî®„Çí„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ`;
      setReplyText(testReply);

      // „É¶„Éº„Ç∂„Éº„Å´ÈÄöÁü•
      alert(
        `AIËøî‰ø°„ÅÆÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÉÜ„Çπ„ÉàËøî‰ø°„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ\n„Ç®„É©„Éº: ${
          error instanceof Error ? error.message : "‰∏çÊòé„Å™„Ç®„É©„Éº"
        }`
      );
    } finally {
      setIsGeneratingAiReply(false);
    }
  };

  // Ëøî‰ø°„ÇíÈÄÅ‰ø°
  const submitReply = async () => {
    if (!selectedReview || !replyText.trim()) return;

    setIsReplying(true);
    try {
      const response = await fetch("/api/google/reply", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          reviewId: selectedReview.id,
          reply: replyText.trim(),
        }),
      });

      if (response.ok) {
        // Ëøî‰ø°ÊàêÂäüÊôÇ„ÅØ„É¨„Éì„É•„Éº„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        console.log("‚úÖ Reply sent successfully");
        await fetchReviews();
        closeReplyDialog();
      } else {
        const errorData = await response
          .json()
          .catch(() => ({ error: "Unknown error" }));
        console.error("‚ùå Reply failed:", errorData);

        let errorMessage = "Ëøî‰ø°„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
        if (errorData.details) {
          errorMessage += `\nË©≥Á¥∞: ${errorData.details}`;
        }
        if (response.status === 401) {
          errorMessage +=
            "\nGoogleË™çË®º„ÅÆÊúâÂäπÊúüÈôê„ÅåÂàá„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÂÜçÂ∫¶„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        } else if (response.status === 403) {
          errorMessage += "\n„Åì„ÅÆ„É¨„Éì„É•„Éº„Å´Ëøî‰ø°„Åô„ÇãÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ";
        } else if (response.status === 404) {
          errorMessage += "\n„É¨„Éì„É•„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ";
        }

        alert(errorMessage);
      }
    } catch (error) {
      console.error("Ëøî‰ø°ÈÄÅ‰ø°„Ç®„É©„Éº:", error);
      alert("Ëøî‰ø°„ÅÆÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ");
    } finally {
      setIsReplying(false);
    }
  };

  if (!mounted) return null;

  return (
    <div className="flex min-h-screen bg-background text-foreground">
      {/* Desktop sidebar */}
      <div className="hidden md:block w-64">
        <Sidebar currentPath="/reviews" />
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <MobileHeader
          title="„ÇØ„ÉÅ„Ç≥„Éü‰∏ÄË¶ß"
          currentPath="/reviews"
          searchPlaceholder="„É¨„Éì„É•„Éº„ÇíÊ§úÁ¥¢..."
          searchValue={searchTerm}
          onSearchChange={setSearchTerm}
          backUrl="/"
        />

        {/* Main area */}
        <div className="flex-1 overflow-auto p-4 md:p-6">
          <div className="max-w-7xl mx-auto">
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
              <motion.h1
                className="text-xl md:text-2xl font-bold"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                {selectedStore === "all"
                  ? "ÂÖ®Â∫óËàó„ÅÆ„ÇØ„ÉÅ„Ç≥„Éü‰∏ÄË¶ß"
                  : `Â∫óËàóÂà•„ÇØ„ÉÅ„Ç≥„Éü‰∏ÄË¶ß (${
                      reviews.find((r) => r.storeId === selectedStore)
                        ?.storeName || selectedStore
                    })`}
              </motion.h1>
              {isGoogleConnected && (
                <div className="flex gap-2">
                  <Button variant="outline" size="sm" className="text-sm">
                    Êú™Ëøî‰ø°„ÅÆ„Åø
                  </Button>
                  <Button variant="outline" size="sm" className="text-sm">
                    Ë©ï‰æ°È†Ü <ChevronDown size={14} className="ml-1" />
                  </Button>
                </div>
              )}
            </div>

            {/* GoogleÈÄ£Êê∫„ÅåÂøÖË¶Å„Å™Â†¥Âêà */}
            {!isGoogleConnected && !isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Globe className="h-5 w-5 text-blue-500" />
                      Google„Éì„Ç∏„Éç„Çπ„Éó„É≠„Éï„Ç£„Éº„É´„Å®„ÅÆÈÄ£Êê∫„ÅåÂøÖË¶Å„Åß„Åô
                    </CardTitle>
                    <CardDescription>
                      „É¨„Éì„É•„ÉºÊÉÖÂ†±„ÇíË°®Á§∫„Åô„Çã„Å´„ÅØ„ÄÅ„Åæ„ÅöGoogle„Éì„Ç∏„Éç„Çπ„Éó„É≠„Éï„Ç£„Éº„É´„Å®ÈÄ£Êê∫„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-col gap-4">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <AlertCircle className="h-4 w-4" />
                        ÈÄ£Êê∫Âæå„ÄÅ„ÅäÂÆ¢Êßò„ÅÆ„É¨„Éì„É•„Éº„Çí‰∏ÄË¶ß„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô
                      </div>
                      <Button
                        onClick={() => router.push("/google-business/connect")}
                        className="w-fit"
                      >
                        <Globe className="h-4 w-4 mr-2" />
                        GoogleÈÄ£Êê∫„ÇíÈñãÂßã
                        <ArrowRight className="h-4 w-4 ml-2" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            )}

            {/* „Ç®„É©„ÉºË°®Á§∫ */}
            {error && !isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="mb-6 border-destructive">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-destructive">
                      <AlertCircle className="h-5 w-5" />
                      „É¨„Éì„É•„Éº„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü
                    </CardTitle>
                    <CardDescription>{error}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-col gap-4">
                      <div className="text-sm text-muted-foreground">
                        <p className="mb-2">ËÄÉ„Åà„Çâ„Çå„ÇãÂéüÂõ†Ôºö</p>
                        <ul className="list-disc list-inside space-y-1">
                          <li>Google Business Profile„ÅÆÊ®©ÈôêË®≠ÂÆö</li>
                          <li>API„Ç¢„ÇØ„Çª„ÇπÂà∂Èôê</li>
                          <li>„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÅÆÂïèÈ°å</li>
                        </ul>
                      </div>
                      <Button
                        onClick={fetchReviews}
                        variant="outline"
                        className="w-fit"
                      >
                        ÂÜçË©¶Ë°å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            )}

            {/* „Éï„Ç£„É´„Çø„Éº„Å®„ÇΩ„Éº„Éà */}
            {isGoogleConnected && (
              <Card className="mb-6 shadow-md">
                <CardContent className="p-4">
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    <div className="relative md:col-span-2">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                      <Input
                        placeholder="„É¨„Éì„É•„Éº„ÇíÊ§úÁ¥¢..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>

                    <Select
                      value={selectedStore}
                      onValueChange={setSelectedStore}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Â∫óËàó„ÇíÈÅ∏Êäû" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">„Åô„Åπ„Å¶„ÅÆÂ∫óËàó</SelectItem>
                        {Array.from(new Set(reviews.map((r) => r.storeId))).map(
                          (storeId) => {
                            const storeName =
                              reviews.find((r) => r.storeId === storeId)
                                ?.storeName || storeId;
                            return (
                              <SelectItem key={storeId} value={storeId}>
                                {storeName}
                              </SelectItem>
                            );
                          }
                        )}
                      </SelectContent>
                    </Select>

                    <Select value={sortBy} onValueChange={setSortBy}>
                      <SelectTrigger>
                        <SelectValue placeholder="‰∏¶„Å≥Êõø„Åà" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="date">Êó•‰ªòÈ†ÜÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ</SelectItem>
                        <SelectItem value="rating-high">
                          Ë©ï‰æ°È†ÜÔºàÈ´ò„ÅÑÈ†ÜÔºâ
                        </SelectItem>
                        <SelectItem value="rating-low">
                          Ë©ï‰æ°È†ÜÔºà‰Ωé„ÅÑÈ†ÜÔºâ
                        </SelectItem>
                        <SelectItem value="store">Â∫óËàóÂêçÈ†Ü</SelectItem>
                        <SelectItem value="replied">Ëøî‰ø°Áä∂ÊÖãÈ†Ü</SelectItem>
                      </SelectContent>
                    </Select>

                    <Select
                      value={filterRating}
                      onValueChange={setFilterRating}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Ë©ï‰æ°„Åß„Éï„Ç£„É´„Çø„Éº" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">„Åô„Åπ„Å¶„ÅÆË©ï‰æ°</SelectItem>
                        <SelectItem value="5">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ (5)</SelectItem>
                        <SelectItem value="4">‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ (4)</SelectItem>
                        <SelectItem value="3">‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ (3)</SelectItem>
                        <SelectItem value="2">‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ (2)</SelectItem>
                        <SelectItem value="1">‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ (1)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã */}
            {isGoogleConnected && isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="overflow-hidden shadow-lg">
                  <CardHeader>
                    <div className="flex items-center gap-2">
                      <SkeletonWithShine className="h-5 w-5 rounded" />
                      <SkeletonText
                        lines={1}
                        lineHeight="md"
                        className="w-48"
                      />
                    </div>
                    <SkeletonText
                      lines={1}
                      lineHeight="sm"
                      className="w-64 mt-2"
                    />
                  </CardHeader>
                  <CardContent className="p-0">
                    <div className="divide-y">
                      {/* 3„Å§„ÅÆÂ∫óËàó„Çπ„Ç±„É´„Éà„É≥ */}
                      {[1, 2, 3].map((index) => (
                        <div key={index} className="px-6 py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <SkeletonWithShine className="h-10 w-10 rounded-lg" />
                              <div>
                                <SkeletonText
                                  lines={1}
                                  lineHeight="md"
                                  className="w-32 mb-2"
                                />
                                <div className="flex items-center gap-3">
                                  <SkeletonText
                                    lines={1}
                                    lineHeight="sm"
                                    className="w-20"
                                  />
                                  <SkeletonText
                                    lines={1}
                                    lineHeight="sm"
                                    className="w-16"
                                  />
                                </div>
                              </div>
                            </div>
                            <SkeletonWithShine className="h-6 w-20 rounded-full" />
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            )}

            {/* „É¨„Éì„É•„Éº‰∏ÄË¶ßÔºàÂ∫óËàó„Åî„Å®„Å´„Ç¢„Ç≥„Éº„Éá„Ç£„Ç™„É≥Ôºâ */}
            {isGoogleConnected && !isLoading && !error && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="overflow-hidden shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <MessageSquare className="h-5 w-5" />
                      ÂÖ®Â∫óËàó„ÅÆ„ÇØ„ÉÅ„Ç≥„Éü‰∏ÄË¶ß
                    </CardTitle>
                    <CardDescription>
                      Â∫óËàó„Åî„Å®„Å´„ÇØ„ÉÅ„Ç≥„Éü„ÇíÁ¢∫Ë™ç„ÉªËøî‰ø°„Åß„Åç„Åæ„Åô
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-0">
                    <Accordion type="multiple" className="w-full">
                      {Object.entries(groupedReviews).map(
                        ([storeName, storeReviews], storeIndex) => {
                          const stats = getStoreStats(storeReviews);

                          return (
                            <AccordionItem
                              key={storeName}
                              value={storeName}
                              className="border-b last:border-b-0"
                            >
                              <AccordionTrigger className="px-6 py-4 hover:no-underline hover:bg-muted/50 transition-colors">
                                <div className="flex items-center justify-between w-full mr-4">
                                  <div className="flex items-center gap-3">
                                    <div className="p-2 bg-primary/10 rounded-lg">
                                      <Store className="h-4 w-4 text-primary" />
                                    </div>
                                    <div className="text-left">
                                      <h3 className="font-semibold text-base">
                                        {storeName}
                                      </h3>
                                      <div className="flex items-center gap-3 mt-1">
                                        <span className="text-sm text-muted-foreground">
                                          {stats.totalReviews}‰ª∂„ÅÆ„É¨„Éì„É•„Éº
                                        </span>
                                        {stats.totalReviews > 0 && (
                                          <>
                                            <span className="text-sm text-muted-foreground">
                                              ‚Ä¢
                                            </span>
                                            <div className="flex items-center gap-1">
                                              <Star className="h-3 w-3 text-amber-500 fill-amber-500" />
                                              <span className="text-sm text-muted-foreground">
                                                {stats.avgRating.toFixed(1)}
                                              </span>
                                            </div>
                                          </>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    {stats.unrepliedCount > 0 && (
                                      <Badge
                                        variant="destructive"
                                        className="text-xs"
                                      >
                                        Êú™Ëøî‰ø° {stats.unrepliedCount}‰ª∂
                                      </Badge>
                                    )}
                                    {stats.hasSystemMessages && (
                                      <Badge
                                        variant="outline"
                                        className="text-xs border-amber-500 text-amber-700"
                                      >
                                        „Ç∑„Çπ„ÉÜ„É†ÈÄöÁü•
                                      </Badge>
                                    )}
                                  </div>
                                </div>
                              </AccordionTrigger>
                              <AccordionContent className="px-6 pb-4">
                                <div className="space-y-3">
                                  {storeReviews.map((review, reviewIndex) => (
                                    <motion.div
                                      key={review.id || reviewIndex}
                                      className={cn(
                                        "p-4 rounded-lg border transition-all duration-200",
                                        review.isSystemMessage
                                          ? "bg-amber-50/50 border-amber-200"
                                          : "bg-card hover:shadow-md hover:border-primary/20"
                                      )}
                                      initial={{ opacity: 0, x: -20 }}
                                      animate={{ opacity: 1, x: 0 }}
                                      transition={{
                                        duration: 0.2,
                                        delay: reviewIndex * 0.05,
                                      }}
                                    >
                                      <div className="flex justify-between items-start mb-2">
                                        <div className="flex items-center gap-2">
                                          {review.reviewer.profilePhotoUrl ? (
                                            <img
                                              src={
                                                review.reviewer.profilePhotoUrl
                                              }
                                              alt={review.reviewer.displayName}
                                              className="w-8 h-8 rounded-full"
                                            />
                                          ) : (
                                            <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                                              <span className="text-xs font-medium text-primary">
                                                {review.reviewer.displayName
                                                  .charAt(0)
                                                  .toUpperCase()}
                                              </span>
                                            </div>
                                          )}
                                          <div>
                                            <p className="font-medium text-sm">
                                              {review.reviewer.displayName}
                                            </p>
                                            <div className="flex items-center gap-2">
                                              {!review.isSystemMessage && (
                                                <div className="flex items-center">
                                                  {Array.from({
                                                    length: 5,
                                                  }).map((_, i) => (
                                                    <Star
                                                      key={i}
                                                      className={cn(
                                                        "h-3 w-3",
                                                        i < (review.rating || 0)
                                                          ? "text-amber-500 fill-amber-500"
                                                          : "text-muted"
                                                      )}
                                                    />
                                                  ))}
                                                </div>
                                              )}
                                              <span className="text-xs text-muted-foreground">
                                                <Calendar className="h-3 w-3 inline mr-1" />
                                                {new Date(
                                                  review.createdAt
                                                ).toLocaleDateString()}
                                              </span>
                                            </div>
                                          </div>
                                        </div>
                                        <div className="flex items-center gap-2">
                                          {review.isSystemMessage && (
                                            <Badge
                                              variant="outline"
                                              className="text-xs border-amber-500 text-amber-700"
                                            >
                                              „Ç∑„Çπ„ÉÜ„É†
                                            </Badge>
                                          )}
                                          {!review.isSystemMessage && (
                                            <Badge
                                              variant={
                                                review.replied
                                                  ? "default"
                                                  : "destructive"
                                              }
                                              className={cn(
                                                "text-xs",
                                                review.replied
                                                  ? "bg-green-500 hover:bg-green-600 text-white"
                                                  : ""
                                              )}
                                            >
                                              {review.replied
                                                ? "Ëøî‰ø°Ê∏à„Åø"
                                                : "Êú™Ëøî‰ø°"}
                                            </Badge>
                                          )}
                                        </div>
                                      </div>

                                      <p
                                        className={cn(
                                          "text-sm mb-2",
                                          review.isSystemMessage &&
                                            "text-amber-800"
                                        )}
                                      >
                                        {review.comment || "(Êú¨Êñá„Å™„Åó)"}
                                      </p>

                                      {review.replied &&
                                        review.replyText &&
                                        !review.isSystemMessage && (
                                          <div className="mt-3 p-3 bg-muted/50 rounded-lg">
                                            <p className="text-sm font-medium mb-1">
                                              Â∫óËàó„Åã„Çâ„ÅÆËøî‰ø°:
                                            </p>
                                            <p className="text-sm">
                                              {review.replyText}
                                            </p>
                                            {review.replyTime && (
                                              <p className="text-xs text-muted-foreground mt-1">
                                                {new Date(
                                                  review.replyTime
                                                ).toLocaleDateString()}
                                              </p>
                                            )}
                                          </div>
                                        )}

                                      {!review.isSystemMessage && (
                                        <div className="flex justify-end mt-3">
                                          <Button
                                            variant="ghost"
                                            size="sm"
                                            className="text-primary hover:text-primary/80 hover:bg-muted"
                                            onClick={() =>
                                              openReplyDialog(review)
                                            }
                                          >
                                            <span className="flex items-center">
                                              {review.replied
                                                ? "Ëøî‰ø°„ÇíÁ∑®ÈõÜ"
                                                : "Ëøî‰ø°„Åô„Çã"}{" "}
                                              <ChevronRight className="h-4 w-4 ml-1" />
                                            </span>
                                          </Button>
                                        </div>
                                      )}
                                    </motion.div>
                                  ))}
                                </div>
                              </AccordionContent>
                            </AccordionItem>
                          );
                        }
                      )}
                    </Accordion>
                  </CardContent>
                </Card>

                {filteredReviews.length === 0 && (
                  <Card className="mt-6">
                    <CardContent className="py-12 text-center">
                      <MessageSquare className="mx-auto h-12 w-12 text-muted-foreground opacity-50 mb-3" />
                      <h3 className="text-lg font-medium mb-1">
                        {searchTerm ||
                        filterRating !== "all" ||
                        selectedStore !== "all"
                          ? "„É¨„Éì„É•„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
                          : "„É¨„Éì„É•„Éº„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"}
                      </h3>
                      <p className="text-muted-foreground">
                        {searchTerm ||
                        filterRating !== "all" ||
                        selectedStore !== "all"
                          ? "Ê§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
                          : "Google Business Profile API„Åã„Çâ„É¨„Éì„É•„Éº„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ"}
                      </p>
                    </CardContent>
                  </Card>
                )}
              </motion.div>
            )}
          </div>
        </div>

        {/* Footer */}
        <footer className="border-t py-3 px-4 md:py-4 md:px-6 text-center text-sm text-muted-foreground">
          ¬© 2025 Leadcreation Co., Ltd.
        </footer>
      </div>

      {/* Ëøî‰ø°„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <Dialog open={isReplyDialogOpen} onOpenChange={setIsReplyDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {selectedReview?.replied ? "Ëøî‰ø°„ÇíÁ∑®ÈõÜ" : "„É¨„Éì„É•„Éº„Å´Ëøî‰ø°"}
            </DialogTitle>
            <DialogDescription>
              „ÅäÂÆ¢Êßò„ÅÆ„É¨„Éì„É•„Éº„Å´ÂØæ„Åô„ÇãËøî‰ø°„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
            </DialogDescription>
          </DialogHeader>

          {selectedReview && (
            <div className="space-y-4">
              {/* „É¨„Éì„É•„ÉºË°®Á§∫ */}
              <div className="p-4 bg-muted/50 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <div className="flex items-center">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <Star
                        key={i}
                        className={cn(
                          "h-4 w-4",
                          i < selectedReview.rating
                            ? "text-amber-500 fill-amber-500"
                            : "text-muted"
                        )}
                      />
                    ))}
                  </div>
                  <span className="font-medium">
                    {selectedReview.reviewer.displayName}
                  </span>
                  <span className="text-sm text-muted-foreground">
                    {new Date(selectedReview.createdAt).toLocaleDateString()}
                  </span>
                </div>
                <p className="text-sm">{selectedReview.comment}</p>
              </div>

              {/* AIËøî‰ø°ÁîüÊàê„Éú„Çø„É≥ */}
              <div className="flex justify-between items-center">
                <Button
                  type="button"
                  variant="outline"
                  onClick={generateAiReply}
                  disabled={isGeneratingAiReply}
                  className="flex items-center gap-2"
                >
                  <Bot className="h-4 w-4" />
                  {isGeneratingAiReply ? "AIËøî‰ø°ÁîüÊàê‰∏≠..." : "AIËøî‰ø°„ÇíÁîüÊàê"}
                </Button>
              </div>

              {/* Ëøî‰ø°„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢ */}
              <div className="space-y-2">
                <label className="text-sm font-medium">Ëøî‰ø°ÂÜÖÂÆπ</label>
                <Textarea
                  value={replyText}
                  onChange={(e) => setReplyText(e.target.value)}
                  placeholder="„ÅäÂÆ¢Êßò„Å∏„ÅÆËøî‰ø°„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                  rows={4}
                  className="resize-none"
                />
              </div>

              {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={closeReplyDialog}
                  disabled={isReplying}
                >
                  „Ç≠„É£„É≥„Çª„É´
                </Button>
                <Button
                  type="button"
                  onClick={submitReply}
                  disabled={isReplying || !replyText.trim()}
                  className="flex items-center gap-2"
                >
                  <Send className="h-4 w-4" />
                  {isReplying ? "ÈÄÅ‰ø°‰∏≠..." : "Ëøî‰ø°„ÇíÈÄÅ‰ø°"}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
